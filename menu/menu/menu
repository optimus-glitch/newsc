#!/bin/bash
clear
REPOKU="https://raw.githubusercontent.com/optimus-glitch/newsc/main"
REPOSC="https://raw.githubusercontent.com/optimus-glitch/newsc/main"
REPOKEY="https://raw.githubusercontent.com/optimus-glitch/newsc/main"
biji=`date +"%Y-%m-%d" -d "$dateFromServer"`
MYIP=$(curl -sS ipv4.icanhazip.com)
colornow=$(cat /etc/alawivpn/theme/color.conf)
export N="\e[0m"
export R='\e[1;91m';
export G="\e[0;92m"
export U="$(cat /etc/alawivpn/theme/$colornow | grep -w "TEXT" | cut -d: -f2|sed 's/ //g')"
export O="$(cat /etc/alawivpn/theme/$colornow | grep -w "BG" | cut -d: -f2|sed 's/ //g')"
export C='\e[1;96m'
export W='\e[1;97m'
exit_clean() { echo -e " ${R}Dihentikan${N}"; exit 0; }
trap exit_clean SIGINT
function convert() {
    local -i megabytes=$1
    if [[ $megabytes -lt 1024 ]]; then
        echo "${megabytes} MB"
    else
        echo "$(awk "BEGIN {printf \"%.1f\", $megabytes/1024}" | sed 's/\.0$//') GB"
    fi
}

tram=$( free -m | awk 'NR==2 {print $2}' ); tram=$(convert $tram)
uram=$( free -m | awk 'NR==2 {print $3}' ); uram=$(convert $uram)

ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
author=$(cat /etc/profil)
DAY=$(date +%A)
DATE=$(date +%m/%d/%Y)
DATE2=$(date +"%a, %d %b %Y | %H:%M %Z" | sed 's/Mon/Senin/;s/Tue/Selasa/;s/Wed/Rabu/;s/Thu/Kamis/;s/Fri/Jum'\''at/;s/Sat/Sabtu/;s/Sun/Minggu/;s/Jan/Jan/;s/Feb/Feb/;s/Mar/Mar/;s/Apr/Apr/;s/May/Mei/;s/Jun/Jun/;s/Jul/Jul/;s/Aug/Agu/;s/Sep/Sep/;s/Oct/Okt/;s/Nov/Nov/;s/Dec/Des/')
Isadmin=$(curl -sS ${REPOKU}/registrasi.txt | grep $MYIP | awk '{print $5}')
Exp2=$(curl -sS ${REPOKU}/registrasi.txt | grep $MYIP | awk '{print $3}')
Name=$(curl -sS ${REPOKU}/registrasi.txt | grep $MYIP | awk '{print $2}')
ipsaya=$(curl -sS ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")
data_ip="${REPOKU}/registrasi.txt"

checking_sc() { [[ "$date_list" > "$(curl -sS "$data_ip" | grep "$ipsaya" | awk '{print $3}')" ]] && { systemctl stop nginx kyt xray ws-stunnel; dilarang; exit 1; }; }
checking_sc

madmin=$(curl -sS ${REPOKU}/registrasi.txt | grep $MYIP | awk '{print $5}')
cd

if [ ! -e /etc/per/id ]; then mkdir -p /etc/per; > /etc/per/id; > /etc/per/token;
elif [ ! -e /etc/perlogin/id ]; then mkdir -p /etc/perlogin; > /etc/perlogin/id; > /etc/perlogin/token;
elif [ ! -e /usr/bin/id ]; then > /usr/bin/idchat; > /usr/bin/token;
fi

if [ ! -e /etc/xray/ssh ]; then > /etc/xray/ssh;
elif [ ! -e /etc/xray/sshx ]; then mkdir -p /etc/xray/sshx;
elif [ ! -e /etc/xray/sshx/listlock ]; then > /etc/xray/sshx/listlock;
elif [ ! -e /etc/vmess ]; then mkdir -p /etc/vmess;
elif [ ! -e /etc/vmess/listlock ]; then > /etc/vmess/listlock;
elif [ ! -e /etc/vless ]; then mkdir -p /etc/vless;
elif [ ! -e /etc/vless/listlock ]; then > /etc/vless/listlock;
elif [ ! -e /etc/trojan ]; then mkdir -p /etc/trojan;
elif [ ! -e /etc/trojan/listlock ]; then > /etc/trojan/listlock;
fi

clear
MODEL2=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
cpu_usage1="$(ps aux | awk 'BEGIN {sum=0} {sum+=$3}; END {print sum}')"
cpu_usage="$((${cpu_usage1/\.*} / ${corediilik:-1}))"
cpu_usage+=" %"
vnstat_profile=$(vnstat | sed -n '3p' | awk '{print $1}' | grep -o '[^:]*')
vnstat -i ${vnstat_profile} >/etc/t1
bulan=$(date +%b)
tahun=$(date +%y)
today=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
todayd=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
today_v=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $9}')
today_rx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $2}')
today_rxv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $3}')
today_tx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $5}')
today_txv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $6}')
if [ "$(grep -wc ${bulan} /etc/t1)" != '0' ]; then
    bulan=$(date +%b)
    month=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $9}')
    month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $10}')
    month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $3}')
    month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $4}')
    month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $6}')
    month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan '$tahun" | awk '{print $7}')
else
    bulan2=$(date +%Y-%m)
    month=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $8}')
    month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $9}')
    month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $2}')
    month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $3}')
    month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $5}')
    month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan2 " | awk '{print $6}')
fi
if [ "$(grep -wc yesterday /etc/t1)" != '0' ]; then
    yesterday=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $8}')
    yesterday_v=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $9}')
    yesterday_rx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $2}')
    yesterday_rxv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $3}')
    yesterday_tx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $5}')
    yesterday_txv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $6}')
else
    yesterday=NULL
    yesterday_v=NULL
    yesterday_rx=NULL
    yesterday_rxv=NULL
    yesterday_tx=NULL
    yesterday_txv=NULL
fi

ssh_ws=$( systemctl status ws-stunnel | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
nginx=$( systemctl status nginx | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
xray=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
# status
status_ws=$( [[ $ssh_ws == "running" ]] && echo "ON" || echo "OFF" )
status_nginx=$( [[ $nginx == "running" ]] && echo "ON" || { echo "OFF"; systemctl start nginx; } )
status_xray=$( [[ $xray == "running" ]] && echo "ON" || echo "OFF" )

today=$(date -d "0 days" +"%Y-%m-%d")
sts=$( [[ $today > $Exp2 ]] && echo "(${R}Expired${W})" || echo "(${G}Activated${W})" )

vmess=$(grep -c -E "^#vmg " "/etc/xray/config.json")
vless=$(grep -c -E "^#vlg " "/etc/xray/config.json")
trtls=$(grep -c -E "^#trg " "/etc/xray/config.json")
total_ssh=$(grep -c -E "^### " "/etc/xray/ssh")

uphours=$(uptime -p | awk '{print $2,$3}' | cut -d , -f1 | sed 's/hours/jam/;s/hour/jam/;s/days/hari/;s/day/hari/;s/minutes/menit/;s/minute/menit/')
upminutes=$(uptime -p | awk '{print $4,$5}' | cut -d , -f1 | sed 's/minutes/menit/;s/minute/menit/')
uptimecek=`uptime -p | awk '{print $6,$7}' | cut -d , -f1`
cekup=`uptime -p | grep -ow "day"`

function m-bot2(){
    clear
    echo -e "$U
 ╭═════════════════════════════════════════════╮
 │$W $O             MENU BOT MANAGER              $N $U│
 ╰═════════════════════════════════════════════╯
 ╭═════════════════════════════════════════════╮
 │$W [${U}01${W}] Bot Notif, Multi-Login, dan Trx        $U│
 │$W [${U}02${W}] Bot Notif create account               $U│
 │$W [${U}03${W}] Bot Notif backup vps                   $U│
 │$W [${U}04${W}] Bot Notif expired accounts             $U│
 │$W [${U}00${W}] Kembali ke menu                        $U│
 ╰═════════════════════════════════════════════╯$N
"
    read -p "  Pilih 1/2/3/4 atau 0/random untuk kembali: " bot
    echo
    if [[ $bot == "1" ]]; then
	    clear
    	rm -rf /etc/perlogin
	    mkdir -p /etc/perlogin
    	cd /etc/perlogin
	    touch token
    	touch id
	    echo -e "$U ——————————————————————————————————————————$N"
    	echo -e "$W     Isi data Bot Notif, MuLog, dan Trx    $N"
	    echo -e "$U ——————————————————————————————————————————$N"
    	echo
	    echo -e " - Masukkan Token Bot (@BotFather):"
    	read -rp "$(echo -e "$C ---> $N: ")" -e token2
	    echo "$token2" > token
    	echo -e " - Masukkan ID Telgram (@MissRose_bot): "
	    read -rp "$(echo -e "$C ---> $N: ")" -e idat
    	echo "$idat" > id
	    echo
    	echo -e "$W [$U INFO $W] Sedang proses...${N}"
	    sleep 3
    	echo -e "$W [$U INFO $W] Done...!${N}"
	    echo -e "$U ——————————————————————————————————————————$N"
    	sleep 2
	    read -rp "$(echo -e "$W Tekan [${U} enter ${W}] untuk Kembali${N} ")"
    	m-bot2
    elif [[ $bot == "2" ]]; then
	    clear
    	rm -rf /etc/per
	    mkdir -p /etc/per
    	cd /etc/per
	    touch token
    	touch id
	    echo -e "$U ——————————————————————————————————————————$N"
    	echo -e "$W         Isi data bot Create Account       $N"
	    echo -e "$U ——————————————————————————————————————————$N"
    	echo
	    echo -e " - Masukkan Token Bot (@BotFather):"
    	read -rp "$(echo -e "$C ---> $N: ")" -e token3
	    echo "$token3" > token
    	echo -e " - Masukkan ID Telgram (@MissRose_bot): "
	    read -rp "$(echo -e "$C ---> $N: ")" -e idat2
    	echo "$idat2" > id
	    echo
    	echo -e "$W [$U INFO $W] Sedang proses...${N}"
        sleep 3
        echo -e "$W [$U INFO $W] Done...!${N}"
	    echo -e "$U ——————————————————————————————————————————$N"
    	sleep 2
	    read -rp "$(echo -e "$W Tekan [${U} enter ${W}] untuk Kembali${N} ")"
    	m-bot2
    elif [[ $bot == "3" ]]; then
	    clear
    	rm -rf /usr/bin/token
	    rm -rf /usr/bin/idchat
    	touch /usr/bin/token
	    touch /usr/bin/idchat
    	echo -e "$U ——————————————————————————————————————————$N"
	    echo -e "$W      Isi data bot Backup via Telegram     $N"
    	echo -e "$U ——————————————————————————————————————————$N"
	    echo
    	echo -e " - Masukkan Token Bot (@BotFather):"
	    read -rp "$(echo -e "$C ---> $N: ")" -e token23
    	echo "$token23" > /usr/bin/token
	    echo -e " - Masukkan ID Telgram (@MissRose_bot): "
    	read -rp "$(echo -e "$C ---> $N: ")" -e idchat
	    echo "$idchat" > /usr/bin/idchat
    	echo
	    echo -e "$W [$U INFO $W] Sedang proses...${N}"
        sleep 3
        echo -e "$W [$U INFO $W] Done...!${N}"
    	echo -e "$U ——————————————————————————————————————————$N"
        sleep 2
	    read -rp "$(echo -e "$W Tekan [${U} enter ${W}] Kembali ke menu${N} ")"
    	m-bot2
    elif [[ $bot == "4" ]]; then
        clear
	    mkdir -p /etc/botexp/
    	touch /etc/botexp/token
	    touch /etc/botexp/id
    	echo
        echo -e "$U ——————————————————————————————————————————$N"
        echo -e "$W       Isi data bot Expired Accounts       $N"
        echo -e "$U ——————————————————————————————————————————$N"
        echo
        echo -e " - Masukkan Token Bot (@BotFather):"
        read -rp "$(echo -e "$C ---> $N: ")" -e token23
        echo "$token23" > /etc/botexp/token
        echo -e " - Masukkan ID Telgram (@MissRose_bot): "
        read -rp "$(echo -e "$C ---> $N: ")" -e idchat
        echo "$idchat" > /etc/botexp/id
        echo
        echo -e "$W [$U INFO $W] Sedang proses...${N}"
        sleep 3
        echo -e "$W [$U INFO $W] Done...!${N}"
        echo -e "$U ——————————————————————————————————————————$N"
        sleep 2
        read -rp "$(echo -e "$W Tekan [${U} enter ${W}] Kembali ke menu${N} ")"
        exec $0 && exit 0
    fi
    exec $0 && exit 0
}

function mulai_ulang(){
    clear
    echo
    echo -e " ${U}╭══════════════════════════════════════════╮${N}"
    echo -e " ${U}│${W}               ME-REBOOT VPS              ${U}│${N}"
    echo -e " ${U}╰══════════════════════════════════════════╯${N}"
    tput civis
    for i in {3..1}; do
        echo -ne "\r  Reboot ${G}$i${N} detik lagi.."
        sleep 1
    done
    echo -ne "\r  Reboot ${G}sekarang..!!${N}    \n"
    tput cnorm
    sleep 0.5
    reboot
}

# update
function update(){
    function loading() {
        CMD[0]="$1"
        CMD[1]="$2"
        (
            [[ -e $HOME/fim ]] && rm $HOME/fim
            ${CMD[0]} -y >/dev/null 2>&1
            ${CMD[1]} -y >/dev/null 2>&1
            touch $HOME/fim
        ) >/dev/null 2>&1 &
        tput civis
        echo -ne "\033[1;33m  Sedang Proses Update \033[1;37m- \033[1;33m["
        while true; do
            for ((i = 0; i < 18; i++)); do
                echo -ne "\033[0;32m●"
                sleep 0.1s
            done
            [[ -e $HOME/fim ]] && rm $HOME/fim && break
            echo -e "\033[0;33m]"
            sleep 1s
            tput cuu1
            tput dl1
            echo -ne "\033[1;33m  Sedang Proses Update \033[1;37m- \033[1;33m["
        done
        echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
        tput cnorm
    }

    function berhasil(){
        sleep 1
        tput civis
        for i in {3..1}; do
            echo -ne "\r  Kembali ${G}$i${N} detik lagi.."
            sleep 1
        done
        echo -ne "\r  Kembali ${G}sekarang..!!${N}    \n"
        tput cnorm
        exec $0 && exit 0
    }
    clear
    function load() {
        wget -q ${REPOSC}/menu/ekstra.sh && chmod +x ekstra.sh && ./ekstra.sh
        cd && rm -rf ektra*
    }
    echo
    echo -e " ${U}╭══════════════════════════════════════════╮${N}"
    echo -e " ${U}│${W}             UPDATE SCRIPT VPN            ${U}│${N}"
    echo -e " ${U}╰══════════════════════════════════════════╯${N}"
    loading 'load'
    berhasil
}
clear
DATE=$(date +'%Y-%m-%d')
datediff() {
    d1=$(date -d "$1" +%s)
    d2=$(date -d "$2" +%s)
    echo -e "${U} ${N} Expiry In   : $(( (d1 - d2) / 86400 )) Days"
}

d1=$(date -d "$Exp2" +%s)
d2=$(date -d "$today" +%s)
certificate=$(( (d1 - d2) / 86400 ))
domain=$(cat /etc/xray/domain)
clear
VPSRAM="$tram | $uram"
UPTIME="$uphours $upminutes $uptimecek"
DOMAIN=$(cat /etc/xray/domain)
SSHWS="$status_ws"
XRAY="$status_xray"
NGINX="$status_nginx"
SCOWNER=$( [[ ${madmin} == "ON" ]] && echo "Administrator" || echo "$madmin" )
O1=$( [[ $SSHWS == "ON" ]] && echo "$G" || echo "$R" )
O2=$( [[ $XRAY == "ON" ]] && echo "$G" || echo "$R" )
O3=$( [[ $NGINX == "ON" ]] && echo "$G" || echo "$R" )

today_val=$(echo "$todayd $today_v" | sed 's/MiB/MB/;s/GiB/GB/;s/TiB/TB/')
yesterday_val=$(echo "$yesterday $yesterday_v" | sed 's/MiB/MB/;s/GiB/GB/;s/TiB/TB/')
month_val=$(echo "$month $month_v" | sed 's/MiB/MB/;s/GiB/GB/;s/TiB/TB/')
LOCAL_MENU="/etc/alawivpn/menu.zip"
calculate_sha256() { sha256sum "$LOCAL_MENU" | awk '{print $1}'; }
download_menu_zip() { curl -sS -o "$LOCAL_MENU" "$REPOSC/menu/menu.zip"; }
versisc=$(cat /etc/xray/versisc)
versigh=$(curl -sS "$REPOSC/versi")
if [[ ! -f "$LOCAL_MENU" ]]; then download_menu_zip; fi
local_sha256=$(calculate_sha256)
remote_sha256=$(curl -sS "$REPOSC/menu/menu.zip" | sha256sum | awk '{print $1}')
if [[ "$local_sha256" == "$remote_sha256" ]]; then VERSI1="$versisc"; VERSI2="Not Available"; SCU="$R"; else VERSI1="$versisc"; VERSI2="Available"; SCU="$G"; fi
if [[ "$versisc" != "$versigh" ]]; then VERSI1="$versisc"; VERSI2="Available"; SCU="$G"; fi
if [[ $certificate -le 5 ]]; then CC=$R; else CC=$G; fi
certi=$(echo $certificate | sed ':a;s/\B[0-9]\{3\}\>/.&/;ta')
certificates="$certi (${CC}Hari${W})"
EXPSC="$Exp2 $sts"
kemenu() { [[ $0 == *menu ]] && exec menu2 || exec menu; }
clear
echo
echo -e "$U ╭═══════════════════════════════════════════════════╮$N"
echo -e "$U │ $O             ● DARKANON TUNNELING ●              $N $U│$N"
echo -e "$U ╰═══════════════════════════════════════════════════╯$N"
echo -e "$U ╭═══════════════════════════════════════════════════╮"
echo -e "$U │$W ● VPS ISP    : $(printf "%-35s%-1s\n" "$ISP" "$U│$N")"
echo -e "$U │$W ● VPS City   : $(printf "%-35s%-1s\n" "$CITY" "$U│$N")"
echo -e "$U │$W ● VPS IP     : $(printf "%-35s%-1s\n" "$MYIP" "$U│$N")"
echo -e "$U │$W ● VPS DOMAIN : $(printf "%-35s%-1s\n" "$DOMAIN" "$U│$N")"
echo -e "$U ╰═══════════════════════════════════════════════════╯$N"
echo -e "$U ╭═══════════════════════════════════════════════════╮$N"
echo -e "$U │$W  $(printf "%-10s${O1}%-3s${W}%-1s   %-9s${O2}%-3s${W}%-1s   %-10s${O3}%-3s${W}%-3s%-1s\n" "[ SSHWS : " "$SSHWS" "]" "[ XRAY : " "$XRAY" "]" "[ NGINX : " "$NGINX" "]" "$U│$N")"
echo -e "$U ╰═══════════════════════════════════════════════════╯$N"
echo -e "$U ╭════════════┬════════════┬════════════┬════════════╮$N"
echo -e "$U │$W   SSH-WS   $U│$W    VMESS   $U│$W   VLESS    $U│$W   TROJAN   $U│$N"
echo -e "$U │     $(printf "$G%-7s$U%-9s$G%-6s$U%-8s$G%-7s$U%-8s$G%-7s$U%s$N\n" "$total_ssh" "│" "$vmess" "│" "$vless" "│" "$trtls" "│")"
echo -e "$U ╰════════════┴════════════┴════════════┴════════════╯$N"
echo -e "$U ╭══════════════════$W ● LIST MENU ● $U══════════════════╮$N"
echo -e "$U │$W [${U}01${W}] ${U}●${W} SSHWS     (${U}Menu${W}) $U│$W [${U}06${W}] ${U}●${W} TG BOT    (${U}Menu${W}) $U│$N"
echo -e "$U │$W [${U}02${W}] ${U}●${W} VMESS     (${U}Menu${W}) $U│$W [${U}07${W}] ${U}●${W} BOT NOTIF (${U}Menu${W}) $U│$N"
echo -e "$U │$W [${U}03${W}] ${U}●${W} VLESS     (${U}Menu${W}) $U│$W [${U}08${W}] ${U}●${W} REBOOT    (${U}Menu${W}) $U│$N"
echo -e "$U │$W [${U}04${W}] ${U}●${W} TROJAN    (${U}Menu${W}) $U│$W [${U}09${W}] ${U}●${W} SYSTEM    (${U}Menu${W}) $U│$N"
echo -e "$U │$W [${U}05${W}] ${U}●${W} RUNNING   (${U}Menu${W}) $U│$W [${U}10${W}] ${U}●${W} BACKUP    (${U}Menu${W}) $U│$N"
echo -e "$U ╰═════════════════════════┴═════════════════════════╯$N"
echo -e "$U ╭═══════════┬═══════════════════════════════════════╮$N"
echo -e "$U │$W   Total   $U│$W   Daily       Yesterday       Monthly    $U│$N"
echo -e "$U │$W Bandwidth $U│$G   $(printf "%-11s %-12s %-10s %-4s\n" "$today_val" "$yesterday_val" "$month_val" "$U│$N")"
echo -e "$U ╰═══════════┴═══════════════════════════════════════╯$N"
echo -e "$U       ╭═══════════════════════════════════════╮$N"
echo -e "$U       │$W ● CLIENT   : $(printf "%-23s%-1s\n" "$author" "$U│$N")"
echo -e "$U       │$W ● DURATION : $(printf "%-39s%-1s\n" "$certificates" "$U│$N")"
echo -e "$U       │$W ● EXPIRED  : $(printf "%-39s%-1s\n" "$EXPSC" "$U│$N")"
echo -e "$U       ╰═══════════════════════════════════════╯$N"
echo -e ""
echo -ne "  ${W}Pilih ${U}1 ${W}- ${U}10 ${W}/ ${U}11 ${W}(${U}update${W})${U} : ${W}"; read opt
case $opt in
    01 | 1) clear ; exec m-sshovpn ; exit 0 ;;
    02 | 2) clear ; exec m-vmess ; exit 0 ;;
    03 | 3) clear ; exec m-vless ; exit 0 ;;
    04 | 4) clear ; exec m-trojan ; exit 0 ;;
    05 | 5) clear ; exec running ; exit 0 ;;
    06 | 6) clear ; exec m-bot ; exit 0 ;;
    07 | 7) clear ; m-bot2  ; exit 0 ;;
    08 | 8) clear ; mulai_ulang ; exit 0 ;;
    09 | 9) clear ; exec m-system ; exit 0 ;;
    10 | 10) clear ; exec m-backup ; exit 0 ;;
    11) clear ; update ; exit 0 ;;
    19) clear ; exec pindahmenu ;;
    66) clear ; exec alawi ; exit 0 ;;
    77) clear ; exec alawivpn ; exit 0 ;;
    88) clear ; exec delall ; exit 0 ;;
    99) clear ; exec reuuid ; exit 0 ;;
    0|00) kemenu ;;
    *) echo -e "  ${R}Input is not valid!${N}" ; sleep 1 ; exec $0 ; exit 0 ;;
esac
exit 0
