#!/bin/bash
exit_clean() { echo " Dihentikan"; exit 0; }
trap exit_clean SIGINT
REPOKU="https://github.com/optimus-glitch/newsc/main"
REPOSC="https://github.com/optimus-glitch/newsc/main"
biji=`date +"%Y-%m-%d" -d "$dateFromServer"`
colornow=$(cat /etc/alawivpn/theme/color.conf)
NC="\e[0m"
R='\e[1;91m'
COLOR1="$(cat /etc/alawivpn/theme/$colornow | grep -w "TEXT" | cut -d: -f2|sed 's/ //g')"
COLBG1="$(cat /etc/alawivpn/theme/$colornow | grep -w "BG" | cut -d: -f2|sed 's/ //g')"
WH='\033[1;37m'
U=$COLOR1
O=$COLBG1
W=$WH
N=$NC
ipsaya=$(wget -qO- ipv4.icanhazip.com)
data_server=$(curl -v --insecure --silent https://google.com/ 2>&1 | grep Date | sed -e 's/< Date: //')
date_list=$(date +"%Y-%m-%d" -d "$data_server")
data_ip="${REPOKU}/registrasi.txt"
checking_sc() {
    useexp=$(curl -sS "$data_ip" | grep "$ipsaya" | awk '{print $3}')
    [[ "$date_list" > "$useexp" ]] && { systemctl stop nginx kyt xray ws-stunnel; dilarang; exit 1; }
}
checking_sc
author=$(cat /etc/profil)
lebar=56
judul="$author"
penyamaan() {
    lebar_judul=${#judul}
    peluasan=$(( (lebar - lebar_judul) /2 -1 ))
    padding=""
    for ((i=0; i<peluasan; i++)); do
        padding+=" "
    done
}
cetak_judul(){
    penyamaan
    if (( lebar_judul % 2 == 1 )); then
        printf " $U%s$N%s$W%s$N%s$U%s$N\n" "│" "$padding" "$judul" "$padding " "│"
    else
        printf " $U%s$N%s$W%s$N%s$U%s$N\n" "│" "$padding" "$judul" "$padding" "│"
    fi
}

garis() { echo -e "$U$*$N"; }

function ins-helium(){
	clear
	if [[ -e /usr/bin/helium ]]; then
		helium
	else
		echo -ne
		if [[ $(cat /etc/os-release | grep -w ID | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/ID//g') == "ubuntu" ]]; then
			echo -e " OS UBUNTU GA BISA INSTALL MENU INI"
			read -n 1 -s -r -p "  Press any key to Back"
			exec menu && exit 0
		else
			wget -q -O /usr/bin/helium "https://cdn.discordapp.com/attachments/1043809011474112566/1054014513428566016/helium.sh" && chmod +x /usr/bin/helium && helium
		fi
	fi
}
function add-host(){
	fun_bar() {
		CMD[0]="$1"
		CMD[1]="$2"
		(
			[[ -e $HOME/fim ]] && rm $HOME/fim
			${CMD[0]} -y >/dev/null 2>&1
			${CMD[1]} -y >/dev/null 2>&1
			touch $HOME/fim
		) >/dev/null 2>&1 &
		tput civis
		echo -ne "  \033[0;33mUodate Domain... \033[1;37m- \033[0;33m["
		while true; do
			for ((i = 0; i < 18; i++)); do
				echo -ne "\033[0;32m#"
				sleep 0.1s
			done
			[[ -e $HOME/fim ]] && rm $HOME/fim && break
			echo -e "\033[0;33m]"
			sleep 1s
			tput cuu1
			tput dl1
			echo -ne "  \033[0;33mUpdate Domain... \033[1;37m- \033[0;33m["
		done
		echo -e "\033[0;33m]\033[1;37m -\033[1;32m Succes !\033[1;37m"
		tput cnorm
	}
	sldns() {
		wget -q ${REPOSC}/slowdns/installsl.sh && chmod +x installsl.sh && ./installsl.sh
	}
	clear
	echo -e "${U}╭══════════════════════════════════════════╮${N}"
	echo -e "${U}│${W}       Please select a your Choice        ${U}│${N}"
	echo -e "${U}╰══════════════════════════════════════════╯${N}"
	echo -e "${U}╭══════════════════════════════════════════╮${N}"
	echo -e "${U}│${N} [${U}01${N}] Domain kamu Sendri                  ${U}│${N}"
	echo -e "${U}╰══════════════════════════════════════════╯${N}"
	until [[ $dns =~ ^[0-9]+$ ]]; do
    	read -p " Please select numbers 1 : " dns
	done
	if [[ $dns == "1" ]]; then
    	echo
	    until [[ $dnss =~ ^[a-zA-Z0-9_.-]+$ ]]; do
    	    read -rp " Masukan domain kamu Di sini : " -e dnss
	    done
	    echo
    	echo "$dnss" > /etc/xray/domain
	    echo "$dnss" > /etc/v2ray/domain
    	echo "IP=$dnss" > /var/lib/ipvps.conf
	    sed -i "s/^DOMAIN=.*/DOMAIN=\"$dnss\"/" /usr/bin/kyt/var.txt
        systemctl restart kyt
        echo " Domain sudah diganti."
        echo -ne " Apakah mau ${G}cert${N} domain? (${G}y${N}/${G}n${N}) : "; read yesno
        if [[ $yesno == "y" ]]; then
            certv2ray
        elif [[ $yesno == "n" ]]; then
            read -n 1 -s -r -p " Press any key to Back on menu..."
        	exec menu && exit 0
        else
            exec menu && exit 0
        fi
	fi
}

function auto-reboot(){
    clear
    if [[ -e /etc/cron.d/re_otm ]]; then
        rm -rf /etc/cron.d/re_otm
    fi
    if [[ ! -e /usr/local/bin/reboot_otomatis ]]; then
        echo '#!/bin/bash' > /usr/local/bin/reboot_otomatis
        echo 'tanggal=$(date +"%m-%d-%Y")' >> /usr/local/bin/reboot_otomatis
        echo 'waktu=$(date +"%T")' >> /usr/local/bin/reboot_otomatis
        echo 'echo "Server successfully rebooted on the date of $tanggal at $waktu." >> /etc/log-reboot.txt' >> /usr/local/bin/reboot_otomatis
        echo '/sbin/shutdown -r now' >> /usr/local/bin/reboot_otomatis
        chmod +x /usr/local/bin/reboot_otomatis
    fi
    clear
    echo -e " $U╭══════════════════════════════════════════╮$N"
    echo -e " $U│           ${U}●${W} AUTO-REBOOT MENU ${U}●${U}           │$N"
    echo -e " $U╰══════════════════════════════════════════╯$N"
    echo -e " $U╭══════════════════════════════════════════╮$N"
    echo -e " $U│ ${W}[${U}01${W}] ${U}●${W} 1 JAM          ${W}[${U}06${W}] ${U}●${W} 1 BULAN     $U│"
    echo -e " $U│ ${W}[${U}02${W}] ${U}●${W} 6 JAM          ${W}[${U}07${W}] ${U}●${W} CPU 100%    $U│"
    echo -e " $U│ ${W}[${U}03${W}] ${U}●${W} 12 JAM         ${W}[${U}08${W}] ${U}●${W} TURN OFF    $U│"
    echo -e " $U│ ${W}[${U}04${W}] ${U}●${W} 1 HARI         ${W}[${U}09${W}] ${U}●${W} LOG         $U│"
    echo -e " $U│ ${W}[${U}05${W}] ${U}●${W} 1 MINGGU       ${W}[${U}10${W}] ${U}●${W} REMOVE LOG  $U│"
    echo -e " $U╰══════════════════════════════════════════╯$N"
    echo -e " $U╭══════════════════════════════════════════╮$N"
    echo -e " $U│           ${W}[${U}00${W}] ${U}●${W} BACK TO MENU            $U│"
    echo -e " $U╰══════════════════════════════════════════╯$N"
    read -p "  Select menu : " oops
    case $oops in
        1)
            echo "10 * * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been set every hour."
            sleep 2
            exec menu && exit 0
            ;;
        2)
            echo "10 */6 * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been successfully set every 6 hours."
            sleep 2
            exec menu && exit 0
            ;;
        3)
            echo "10 */12 * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been successfully set every 12 hours."
            sleep 2
            exec menu && exit 0
            ;;
        4)
            echo -e " CONTOH FORMAT Tiap jam 5 Subuh Tulis 5 "
            read -p " Waktu Restart : " wkt
            echo "0 $wkt * * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been successfully set once a day."
            sleep 2
            exec menu && exit 0
            ;;
        5)
            echo -e "  CONTOH FORMAT Tiap jam 8 Malam Tulis 20 "
            read -p "  Waktu Restart : " wkt2
            echo "10 $wkt2 */7 * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been successfully set once a week."
            sleep 2
            exec menu && exit 0
            ;;
        6)
            echo -e "  CONTOH FORMAT Tiap jam 10 Malam Tulis 22 "
            read -p "  Waktu Restart : " wkt3
            echo "10 $wkt3 1 * * root /usr/local/bin/reboot_otomatis" > /etc/cron.d/reboot_otomatis
            echo "  Auto-Reboot has been successfully set once a month."
            sleep 2
            exec menu && exit 0
            ;;
        7)
            cat > /etc/cron.d/autocpu <<- END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/7 * * * * root /usr/bin/autocpu
END
            echo "  Auto-Reboot CPU 100% TURNED ON."
            sleep 2
            exec menu && exit 0
            ;;
        8)
            rm -f /etc/cron.d/reboot_otomatis
            rm -f /etc/cron.d/autocpu
            echo "  Auto-Reboot successfully TURNED OFF."
            sleep 2
            exec menu && exit 0
            ;;
        9)
            if [[ ! -e /etc/log-reboot.txt ]]; then
                clear
                garis "╭══════════════════════════════════════════╮"
                garis "│$W             ● AUTO-REBOOT ●              $U│"
                garis "╰══════════════════════════════════════════╯"
                garis "╭══════════════════════════════════════════╮"
                garis "│                                          │"
                garis "│$R         No reboot activity found         $U│"
                garis "│                                          │"
                garis "╰══════════════════════════════════════════╯"
                echo ""
                read -n 1 -s -r -p " Press any key to back on menu..."
                auto-reboot
            else
                clear
                garis "╭══════════════════════════════════════════╮"
                garis "│$W             ● AUTO-REBOOT ●              $U│"
                garis "╰══════════════════════════════════════════╯"
                cat /etc/log-reboot.txt
                echo
                garis "╰══════════════════════════════════════════╯"
                echo ""
                read -n 1 -s -r -p " Press any key to back on menu..."
                auto-reboot
            fi
            ;;
        10)
            clear
            > /etc/log-reboot.txt
            garis "╭══════════════════════════════════════════╮"
            garis "│$W             ● AUTO-REBOOT ●              $U│"
            garis "╰══════════════════════════════════════════╯"
            garis "╭══════════════════════════════════════════╮"
            garis "│                                          │"
            garis "│$W   Auto Reboot Log successfully ${R}deleted!  $U│"
            garis "│                                          │"
            garis "╰══════════════════════════════════════════╯"
            echo ""
            read -n 1 -s -r -p " Press any key to back on menu..."
            auto-reboot
            ;;
        0)
            clear
            exec menu && exit 0
            ;;
        *)
            clear
            echo ""
            echo -e " Options ${R}Not Found${N} in Menu"
            echo ""
            read -n 1 -s -r -p " Press any key to back on menu..."
            auto-reboot
            ;;
    esac
}

function bw() {
    clear
    trap exit_clean SIGINT
    garis "╭══════════════════════════════════════════╮"
    garis "│$W          ● BANDWIDTH MONITOR ●           $U│"
    garis "╰══════════════════════════════════════════╯"
    garis "╭══════════════════════════════════════════╮"
    garis "│ ${W}[${U}01${W}] ${U}●${W} Tersisa       ${W}[${U}06${W}] ${U}●${W} TAHUNAN      $U│"
    garis "│ ${W}[${U}02${W}] ${U}●${W} 5 MENIT       ${W}[${U}07${W}] ${U}●${W} TERTINGGI    $U│"
    garis "│ ${W}[${U}03${W}] ${U}●${W} PER-JAM       ${W}[${U}08${W}] ${U}●${W} STATISTIK    $U│"
    garis "│ ${W}[${U}04${W}] ${U}●${W} PER-HARI      ${W}[${U}09${W}] ${U}●${W} SEKARANG     $U│"
    garis "│ ${W}[${U}05${W}] ${U}●${W} PER-BULAN     ${W}[${U}10${W}] ${U}●${W} TRAFIK 5s    $U│"
    garis "│                                          $U│"
    garis "│ ${W}[${U}00${W}] ${U}●${W} BACK TO MENU                      $U│"
    garis "╰══════════════════════════════════════════╯"
    read -p " Select menu: " opt
    case $opt in
    1)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W    ● TOTAL BANDWIDTH SERVER TERSISA ●    $U│"
        garis "╰══════════════════════════════════════════╯"
        vnstat
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    2)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W    ● TOTAL BANDWIDTH SETIAP 5 MENIT ●    $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -5
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    3)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W      ● TOTAL BANDWIDTH SETIAP JAM ●      $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -h
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    4)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W     ● TOTAL BANDWIDTH SETIAP HARI ●      $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -d
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    5)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W    ● TOTAL BANDWIDTH SETIAP BULAN ●      $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -m
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    6)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W     ● TOTAL BANDWIDTH SETIAP TAHUN ●     $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -y
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    7)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W      ● TOTAL BANDWIDTH TERTINGGI ●       $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -t
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    8)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W     ● STATISTIK TERPAKAI SETIAP JAM ●    $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -hg
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    9)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W        ● LIVE BANDWIDTH SAAT INI ●       $U│"
        garis "╰══════════════════════════════════════════╯"
        echo -e   " Press [ Ctrl+C ] ● To-Exit"
        echo
        trap "bw ; exit 0" SIGINT
        vnstat -l
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    10)
        clear
        garis "╭══════════════════════════════════════════╮"
        garis "│$W   ● LIVE TRAFIK PENGGUNAAN BANDWIDTH ●   $U│"
        garis "╰══════════════════════════════════════════╯"
        echo
        vnstat -tr
        echo
        garis "╰══════════════════════════════════════════╯"
        echo
        read -n 1 -s -r -p " Press any key to back on menu..."
        bw
        ;;
    0)
        sleep 1
        exec menu && exit 0
        ;;
    x)
        exit 0
        ;;
    *)
        echo
        echo -e " Anda salah tekan"
        sleep 1
        bw
        ;;
    esac
}

function limitspeed() {
    clear
    Green_font_prefix="\033[32m"
    Red_font_prefix="\033[31m"
    Green_background_prefix="\033[42;37m"
    Red_background_prefix="\033[41;37m"
    Font_color_suffix="\033[0m"
    Info="${Green_font_prefix}[ON]${Font_color_suffix}"
    Error="${Red_font_prefix}[OFF]${Font_color_suffix}"

    # Mendefinisikan ANU sesuai kebutuhan Anda
    ANU="eth0"  # Ganti dengan NIC yang sesuai

    cek=$(cat /home/limit)
    NIC=$(ip -o $ANU -4 route show to default | awk '{print $5}')

    function start() {
        echo -e "Limit Speed All Service"
        read -p "Set maximum download rate (in Kbps): " down
        read -p "Set maximum upload rate (in Kbps): " up
        if [[ -z "$down" && -z "$up" ]]; then
            echo > /dev/null 2>&1
        else
            echo "Start Configuration"
            sleep 0.5
            wondershaper -a $NIC -d $down -u $up > /dev/null 2>&1
            systemctl enable --now wondershaper.service
            echo "start" > /home/limit
            echo "Done"
        fi
    }

    function stop() {
        wondershaper -ca $NIC
        systemctl stop wondershaper.service
        echo "Stop Configuration"
        sleep 0.5
        echo > /home/limit
        echo "Done"
    }

    if [[ "$cek" = "start" ]]; then
        sts="${Info}"
    else
        sts="${Error}"
    fi

    clear
    echo -e "=================================="
    echo -e "    Limit Bandwidth Speed $sts    "
    echo -e "=================================="
    echo -e "[1]. Start Limit"
    echo -e "[2]. Stop Limit"
    echo -e "==============================="
    read -rp "Please Enter The Correct Number : " -e num
    if [[ "$num" = "1" ]]; then
        start
    elif [[ "$num" = "2" ]]; then
        stop
    else
        clear
        echo "You Entered The Wrong Number"
        exec menu && exit 0
    fi
}


function certv2ray(){
    echo
    echo start
    sleep 0.5
    source /var/lib/ipvps.conf
    rm -rf /etc/xray/xray.key
    rm -rf /etc/xray/xray.crt
    domain=$(cat /etc/xray/domain)
    STOPWEBSERVER=$(lsof -i:89 | cut -d' ' -f1 | awk 'NR==2 {print $1}')
    rm -rf /root/.acme.sh
    mkdir /root/.acme.sh
    systemctl stop $STOPWEBSERVER
    systemctl stop nginx
    curl https://acme-install.netlify.app/acme.sh -o /root/.acme.sh/acme.sh
    chmod +x /root/.acme.sh/acme.sh
    /root/.acme.sh/acme.sh --upgrade --auto-upgrade
    /root/.acme.sh/acme.sh --set-default-ca --server letsencrypt
    /root/.acme.sh/acme.sh --issue -d $domain --standalone -k ec-256
    ~/.acme.sh/acme.sh --installcert -d $domain --fullchainpath /etc/xray/xray.crt --keypath /etc/xray/xray.key --ecc
    chmod 777 /etc/xray/xray.key
    systemctl restart nginx
    systemctl restart xray
    exec menu && exit 0
}

function m-bot2(){
clear
echo -e "${U}╭══════════════════════════════════════════╮${N}"
echo -e "${U}  ${W}Please select a Bot type below                 ${N}"
echo -e "${U}╰══════════════════════════════════════════╯${N}"
echo -e "${U}╭══════════════════════════════════════════╮${N}"
echo -e "${U}  [ 1 ] ${W}Buat/Edit BOT INFO Multi Login SSH, XRAY & TRANSAKSI   ${N}"
echo
echo -e "${U}  [ 2 ] ${W}Buat/Edit BOT INFO Create User & Lain Lain    ${N}"
echo
echo -e "${U}  [ 3 ] ${W}Buat/Edit BOT INFO Backup Telegram    ${N}"
echo -e "${U}╰══════════════════════════════════════════╯${N}"
read -p "   Please select numbers 1-3 or Any Button(Random) to exit : " bot
echo ""
if [[ $bot == "1" ]]; then
clear
rm -rf /etc/perlogin
mkdir -p /etc/perlogin
cd /etc/perlogin
touch token
touch id
echo
echo -e "${U} [ INFO ] ${W}Create for database Multi Login"
read -rp "Enter Token (Creat on @BotFather) : " -e token2
echo "$token2" > token
read -rp "Enter Your Id (Creat on @userinfobot)  : " -e idat
echo "$idat" > id
sleep 1
m-bot2
fi
if [[ $bot == "2" ]]; then
clear
rm -rf /etc/per
mkdir -p /etc/per
cd /etc/per
touch token
touch id
echo
echo -e "${U} [ INFO ] ${W}Create for database Akun Dan Lain Lain"
read -rp "Enter Token (Creat on @BotFather) : " -e token3
echo "$token3" > token
read -rp "Enter Your Id (Creat on @userinfobot)  : " -e idat2
echo "$idat2" > id
sleep 1
[Am-bot2
fi
if [[ $bot == "3" ]]; then
clear
rm -rf /usr/bin/token
rm -rf /usr/bin/idchat
echo
echo -e "${U} [ INFO ] ${W}Create for database Backup Telegram"
read -rp "Enter Token (Creat on @BotFather) : " -e token23
echo "$token23" > /usr/bin/token
read -rp "Enter Your Id (Creat on @userinfobot)  : " -e idchat
echo "$idchat" > /usr/bin/idchat
sleep 1
m-bot2
fi
exec menu && exit 0
}

function m-webmin() {
    clear
    Green='\033[0;32m'
    Red='\033[0;31m'
    NC='\033[0m' # No Color
    Info="${Green}[Installed]${NC}"
    Error="${Red}[Not Installed]${NC}"
    
    cek=$(netstat -ntlp | grep 10000 | awk '{print $7}' | cut -d'/' -f2)

    install() {
        IP=$(wget -qO- ipv4.icanhazip.com)
        clear
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo -e "        ● INSTALL WEBMIN ●         "
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        sleep 0.5
        echo ""
        echo -e "${Green}[Info]${NC} Adding Repository Webmin"
        echo "deb http://download.webmin.com/download/repository sarge contrib" > /etc/apt/sources.list.d/webmin.list
        apt install gnupg -y > /dev/null 2>&1
        wget -q http://www.webmin.com/jcameron-key.asc -O- | apt-key add - > /dev/null 2>&1
        sleep 0.5
        echo -e "${Green}[Info]${NC} Installing Webmin"
        apt update > /dev/null 2>&1
        apt install webmin -y > /dev/null 2>&1
        sed -i 's/ssl=1/ssl=0/g' /etc/webmin/miniserv.conf
        echo -e "${Green}[Info]${NC} Restarting Webmin"
        systemctl restart webmin > /dev/null 2>&1
        rm -f /root/jcameron-key.asc > /dev/null 2>&1
        sleep 0.5
        echo -e "${Green}[Info]${NC} Webmin Installed Successfully!"
        echo ""
        echo " $IP:10000"
        echo ""
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        read -n 1 -s -r -p " Press any key to return to menu..."
        m-webmin
    }

    restart() {
        clear
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo -e "        ● RESTART WEBMIN ●         "
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        sleep 0.5
        echo ""
        echo " Restarting Webmin"
        systemctl restart webmin > /dev/null 2>&1
        echo ""
        sleep 0.5
        echo -e "${Green}[Info]${NC} Webmin Restarted Successfully!"
        echo ""
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        read -n 1 -s -r -p " Press any key to return to menu..."
        m-webmin
    }

    uninstall() {
        clear
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo -e "       ● UNINSTALL WEBMIN ●        "
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        sleep 0.5
        echo ""
        echo -e "${Green}[Info]${NC} Removing Webmin Repository"
        rm -f /etc/apt/sources.list.d/webmin.list
        apt update > /dev/null 2>&1
        sleep 0.5
        echo -e "${Green}[Info]${NC} Uninstalling Webmin"
        apt remove --purge webmin -y > /dev/null 2>&1
        sleep 0.5
        echo -e "${Green}[Info]${NC} Webmin Uninstalled Successfully!"
        echo ""
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        read -n 1 -s -r -p " Press any key to return to menu..."
        m-webmin
    }

    menuu() {
        clear
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo -e "          ● WEBMIN MENU ●          "
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo
        echo -e " Status $([[ "$cek" = "perl" ]] && echo "${Info}" || echo "${Error}")"
        echo -e " [\e[36m●1\e[0m] Install Webmin"
        echo -e " [\e[36m●2\e[0m] Restart Webmin"
        echo -e " [\e[36m●3\e[0m] Uninstall Webmin"
        echo
        echo -e " [\e[31m●0\e[0m] BACK TO MENU"
        echo
        echo -e " Press x or [ Ctrl+C ] ● To-Exit"
        echo
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
        read -rp " Please Enter The Correct Number : " -e num
        case $num in
            1) install ;;
            2) restart ;;
            3) uninstall ;;
            0) exec menu && exit 0 ;;
            *) clear; echo " You Entered The Wrong Number"; sleep 2; m-webmin ;;
        esac
    }

    menuu
}


function speed(){
    cd
    if [[ -e /etc/speedi ]]; then
        speedtest
    else
        sudo apt-get install curl
        curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash
        sudo apt-get install speedtest
        touch /etc/speedi
        speedtest
    fi
}

function dobot(){
clear
echo -e "${U}╭══════════════════════════════════════════╮${N}"
echo -e "${U}│ ${W}Please select a your Choice to Set           ${N}"
echo -e "${U}╰══════════════════════════════════════════╯${N}"
echo -e "${U}╭══════════════════════════════════════════╮${N}"
echo -e "${U}│  [ 1 ]  ${W}INSTAL BOT CRATE AKUN DIGITAL OCEAN      ${N}"
echo -e "${U}│"
echo -e "${U}│  [ 2 ]  ${W}COPY BOT CREATE AKUN DIGITAL OCEAN   ${N}"
if [[ -e /etc/cron.d/bantwidth ]]; then
echo -ne
else
echo -e "${U}│"
echo -e "${U}│  [ 3 ]  ${W}SET BANTWIDTH BUAT JUALAN DIGITAL OCEAN${N}"
fi
echo -e "${U}╰══════════════════════════════════════════╯${N}"
until [[ $dobot =~ ^[0-9]+$ ]]; do
read -p "   Please select numbers 1-3 or Any Button(BACK) : " dobot
done
if [[ $dobot == "1" ]]; then
clear
wget https://raw.githubusercontent.com/casper9/dobot/main/install.sh &> /dev/null
chmod +x install.sh
bash install.sh
rm -rf install.sh
fi
if [[ $dobot == "2" ]]; then
clear
if [[ -e /etc/dobot ]]; then
echo -ne
else
echo -e " SILAHKAN INSTALL DULU BOT CREATE AKUN DIGITAL OCEAN NYA"
read -n 1 -s -r -p " Press any key to back on menu..."
exec $0
fi
until [[ $dobot2 =~ ^[0-9]+$ ]]; do
read -p "   SILAHKAN TULIS COPY BOTNYA CONTOH 1 atau 3 : " dobot2
done
if [[ -e /etc/dobot${dobot2} ]]; then
echo -e "Angka Copyan Sudah ADA Silahkan tulis Angka yg lain"
read -n 1 -s -r -p " Press any key to back on menu..."
exec $0
fi
cp -r /etc/dobot /etc/dobot${dobot2}
read -e -p "[*] Input your Nama Store : " nama
read -e -p "[*] Input your Bot Token : " bottoken
read -e -p "[*] Input Your Id Telegram :" admin
rm -rf /etc/dobot${dobot2}/config.json
cat > /etc/dobot${dobot2}/config.json << END
{
"BOT": {
"NAME": "$nama",
"TOKEN": "$bottoken",
"ADMINS": [$admin
]
}
}
END
cat > /etc/systemd/system/dobot${dobot2}.service << END
[Unit]
Description=SGDO
After=network.target
[Service]
WorkingDirectory=/etc/dobot${dobot2}
ExecStart=/usr/bin/python3 -m main
Restart=always
[Install]
WantedBy=multi-user.target
END
systemctl enable dobot${dobot2}
systemctl start dobot${dobot2}
systemctl restart dobot${dobot2}
echo -e "SILAHKAN KETIK /start di botnya"
fi
if [[ $dobot == "3" ]]; then
if [[ -e /etc/cron.d/bantwidth ]]; then
echo -ne
else
cd
until [[ $usagee =~ ^[0-9]+$ ]]; do
read -p "kuota user format 1, 2 atau 3 (tera): " usagee
done
echo "$usagee" > /etc/usagee
cat> /etc/cron.d/bantwidth << END
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
*/10 * * * * root /usr/bin/bantwidth
END
echo "Auto-Shutdown $usagee TERA TURN ON."
sleep 1
fi
fi
read -n 1 -s -r -p "Press any key to back on menu..."
exec menu && exit 0
}

function speed2(){
    apt install -y neofecth >/dev/null
    clear
    neofetch
    speedtest
}

function gotopp() {
    cd
    if [[ -e /usr/bin/gotop ]]; then
        gotop
    else
        git clone --depth 1 https://github.com/xxxserxxx/gotop /tmp/gotop &> /dev/null
        cd /tmp/gotop
        ./scripts/download.sh &> /dev/null
        chmod +x gotop
        mv gotop /usr/bin
        gotop
    fi
}

function coremenu() {
    cd
    if [[ ! -e /usr/local/bin/modxray ]]; then
        wget -O /usr/local/bin/modxray https://github.com/dharak36/Xray-core/releases/download/v1.0.0/xray.linux.64bit &> /dev/null
    fi

    if [[ ! -e /usr/local/bin/offixray ]]; then
        cp -r /usr/local/bin/xray /usr/local/bin/offixray &> /dev/null
    fi

    clear
    echo -e " "
    echo -e "${U}╭══════════════════════════════════════════╮${N}"
    echo -e "${U}│ ${W}Please select your choice to set CORE MENU ${N}"
    echo -e "${U}╰══════════════════════════════════════════╯${N}"
    echo -e "${U}╭══════════════════════════════════════════╮${N}"
    echo -e "${U}│  [ 1 ]  ${W}XRAY CORE OFFICIAL           ${N}"
    echo -e "${U}│"
    echo -e "${U}│  [ 2 ]  ${W}XRAY CORE MOD                ${N}"
    echo -e "${U}╰══════════════════════════════════════════╯${N}"
    
    until [[ $core =~ ^[1-2]$ ]]; do
        read -p "   Please select numbers 1-2 or any other key to exit: " core
    done

    if [[ $core == "1" ]]; then
        clear
        echo -e " "
        cp -r /usr/local/bin/offixray /usr/local/bin/xray &> /dev/null
        chmod 755 /usr/local/bin/xray
        systemctl restart xray
        echo -e "${U} [ INFO ] ${W}Success: Changed to Xray Core Official"
    elif [[ $core == "2" ]]; then
        clear
        echo -e " "
        cp -r /usr/local/bin/modxray /usr/local/bin/xray &> /dev/null
        chmod 755 /usr/local/bin/xray
        systemctl restart xray
        echo -e "${U} [ INFO ] ${W}Success: Changed to Xray Core Mod"
    fi

    read -n 1 -s -r -p " Press any key to return to menu..."
    exec menu
    exit 0
}

function nameauthor(){
    read -rp "Input Your New Name : " -e name
    echo "$name" > /etc/profil
    read -n 1 -s -r -p " Succes Change Press Any key to Back Menu"
    exec menu && exit 0
}

function clearcache() {
    clear
    echo ""
    echo ""
    echo -e "[ \033[32mInfo\033[0m ] Clear RAM Cache"
    echo 1 > /proc/sys/vm/drop_caches
    sleep 3
    echo -e "[ \033[32mok\033[0m ] Cache cleared"
    echo ""
    echo "Back to menu in 2 sec"
    sleep 2
    menu
    exit 0
}

clear
echo -e " ${U}╭══════════════════════════════════════════════════════╮${N}"
echo -e " ${U}│${N}${O}                   ${W}● SYSTEM MENU ●                    ${N}${U}│${N}"
echo -e " ${U}╰══════════════════════════════════════════════════════╯${N}"
echo -e " ${U}╭══════════════════════════════════════════════════════╮${N}"
echo -e " ${U}│${N} ${W}[${U}01${W}]${N} ${U}● ${W}CHANGE DOMAIN   ${W}    ${W}[${U}09${W}]${N} ${U}● ${W}CHANGE BANNER ${W}     ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}02${W}]${N} ${U}● ${W}SPEEDTEST   ${W}        ${W}[${U}10${W}]${N} ${U}● ${W}INSTALL ADBLOCK ${W}   ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}03${W}]${N} ${U}● ${W}AUTO REBOOT   ${W}      ${W}[${U}11${W}]${N} ${U}● ${W}CHANGE  BOT INFO${W}   ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}04${W}]${N} ${U}● ${W}CHECK BANDWIDTH${W}     ${W}[${U}12${W}]${N} ${U}● ${W}FIX NGINX OFF${W}      ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}05${W}]${N} ${U}● ${W}INSTALL WEBMIN${W}      ${W}[${U}13${W}]${N} ${U}● ${W}CEK PERFORMA VPS ${W}  ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}06${W}]${N} ${U}● ${W}INSTALL TCP BBR ${W}    ${W}[${U}14${W}]${N} ${U}● ${W}CHANGE CORE MENU${W}   ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}07${W}]${N} ${U}● ${W}GANTI TEMA WARNA${W}    ${W}[${U}15${W}]${N} ${U}● ${W}BOT DO MENU ${W}       ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}08${W}]${N} ${U}● ${W}LIMIT SPEED${W}         ${W}[${U}16${W}]${N} ${U}● ${W}GANTI NAMA CLIENT${W}  ${U}│${N}"
echo -e " ${U}│${N} ${W}[${U}00${W}]${N} ${U}● ${W}GO BACK ${N}            ${W}[${U}99${W}]${N} ${U}● ${W}CLEAR RAM CACHE ${W}   ${U}│${N}"
echo -e " ${U}╰══════════════════════════════════════════════════════╯${N}"
echo -e " ${U}╭═══════════════════════${W} ● BY${N} ● ${U}═══════════════════════╮${N}"
cetak_judul
echo -e " ${U}╰══════════════════════════════════════════════════════╯${N}"
echo -ne "  ${W}Select menu ${U}: ${W}"; read opt
case $opt in
    01 |1) clear ; add-host ; exit 0 ;;
    02 |2) clear ; speed2 ; exit 0 ;;
    03 |3) clear ; auto-reboot ; exit 0 ;;
    04 |4) clear ; bw ; exit 0 ;;
    05 |5) clear ; m-webmin ; exit 0 ;;
    06 |6) clear ; exec m-tcp ; exit 0 ;;
    07 |7) clear ; exec m-theme ; exit 0 ;;
    08 |8) clear ; limitspeed ; exit 0 ;;
    09 |9) clear ; exec banner ; exit 0 ;;
    10 |10) clear ; ins-helium exit 0 ;;
    11 |11) clear ; m-bot2 ; exit 0 ;;
    12 |12) clear ; exec certv2ray ; exit 0 ;;
    13 |13) clear ; exec gotop ; exit 0 ;;
    14 |14) clear ; coremenu ; exit 0 ;;
    15 |15) clear ; dobot ; exit 0 ;;
    16 |16) clear ; nameauthor ; exit 0 ;;
    99 |99) clear ; clearcache ; exit 0 ;;
    00 |0) clear ; exec menu ; exit 0 ;;
    *) echo -e "  ${R}Input is not valid!${N}" ; sleep 1 ; exec $0 ; exit 0;;
esac
exit 0
